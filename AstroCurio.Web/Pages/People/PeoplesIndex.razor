@page "/people"
@using AstroCurio.Shared.Entities;
@using AstroCurio.WEB.Repositories;
@inject IRepository repository
@inject NavigationManager Navigation

<h3>PeopleIndex</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/people/create">New Person</a>
</div>

<GenericList MyList="People">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Person</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in People!)
                {
                    <tr>
                        <td>
                            @person.FirstName
                        </td>
                        <td>
                            <a class="btn btn-warning" @onclick="() => EditPerson(person.Id)">Editar</a>
                     @*        <button class="btn btn-danger" @onclick="() => DeletePerson(person.Id)">Borrar</button> *@
                            <button class="btn btn-success" @onclick="CreatePerson">Crear</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Person>? People { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Person>>("/api/people");
        People = responseHttp.Response!;
    }

    private void EditPerson(int personId)
    {
        // Implementa la navegación a la página de edición con el ID de la persona
        Navigation.NavigateTo($"/people/edit/{personId}");
    }

    // private async Task DeletePerson(int personId)
    // {
    //     // Implementa la lógica para borrar la persona con el ID proporcionado
    //     // Llama al servicio/repository correspondiente
    //     await repository.DeleteAsyn($"/api/people/{personId}");
    //     // Recarga la lista después de borrar
    //     LoadPeople();
    // }

    private void CreatePerson()
    {
        // Implementa la navegación a la página de creación
        Navigation.NavigateTo("/people/create");
    }

    private void LoadPeople()
    {
        // Implementa la lógica para cargar nuevamente la lista de personas
        // Puedes llamar al método OnInitializedAsync() o realizar la carga directamente aquí
    }
}